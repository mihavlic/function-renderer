#version 450
#extension GL_EXT_scalar_block_layout : enable

////// input descriptors, keep this synchronized //////

struct Vertex {
    vec3 position; 
    uint packed_normal;
};

layout(binding = 0, r16f) uniform readonly image3D function_values;
layout(binding = 1, rgba8) uniform writeonly image3D intersections;
layout(binding = 2, r32ui) uniform uimage3D vertex_indices;
layout(binding = 3, scalar) buffer VertexData {
    uint size;
    uint offset;
	Vertex vertices[];
} vertices;
layout(binding = 4, scalar) buffer IndexData {
    uint size;
    uint offset;
	uint indices[];
} indices;
layout(binding = 5, scalar) uniform FunctionData {
	uvec3 size;
    vec3 offset;
    float scale;
    float time;
} function_data;

/////////////////////////////////

layout(local_size_x = 4 * 3, local_size_y = 4, local_size_z = 4) in;

float density(vec4 data);

// compute the gradient of the function using finite differences
vec3 calculate_gradient(vec3 pos) {
    const float d = 0.05;
    
    float x = pos.x;
    float y = pos.y;
    float z = pos.z;
    float t = function_data.time;

#if 0
    float origin = density(vec4(pos, function_data.time));

    float dx = (density(vec4(x + d, y, z, t)) - origin) / d;
    float dy = (density(vec4(x, y + d, z, t)) - origin) / d;
    float dz = (density(vec4(x, y, z + d, t)) - origin) / d;
#else
    float dx = (density(vec4(x + d, y, z, t)) - density(vec4(x - d, y, z, t))) / (2.0 * d);
    float dy = (density(vec4(x, y + d, z, t)) - density(vec4(x, y - d, z, t))) / (2.0 * d);
    float dz = (density(vec4(x, y, z + d, t)) - density(vec4(x, y, z - d, t))) / (2.0 * d);
#endif

    return vec3(dx, dy, dz);
}

const uvec3[] axes = {
    {1,0,0},
    {0,1,0},
    {0,0,1}
};

void main() {
    uvec3 global_id = gl_GlobalInvocationID.xyz;    

    uint  axis_index = global_id.x % 3;
    uvec3 axis = axes[axis_index];
    uvec3 pos = uvec3(global_id.x / 3, global_id.yz);
    uvec3 pos2 = pos + axis;

    uvec3 index = global_id;

    // initially clear the output texture
    imageStore(intersections, ivec3(index), vec4(0.0));

    if (pos2.x > (3 * 64 - 1) || pos2.y > 63 || pos2.z > 63) {
        return;
    }

    float p1 = imageLoad(function_values, ivec3(pos)).x;
    float p2 = imageLoad(function_values, ivec3(pos2)).x;

    const float infinity = 1.0 / 0.0;

    // infinity plays kind of poorly with our zero crossing detection
    // we get better results when rejecting it
    if (abs(p1) == infinity || abs(p2) == infinity) {
        return;
    }

    // early exit if the sign is the same
    if ((p1 >= 0.0) == (p2 >= 0.0)) {
        return;
    }

    // a quick path which assumes that the function is a straight line at the intersection point
    // we construct a line equation and intersect it with the axis
    //
    //    |--__
    //    |    --__          y ^ 
    // p1 |        | p2        |
    //    |________|           |--> x
    //
    // y = kx + q
    //
    // p1 = k*0 + q  -> q = p1
    // p2 = k*1 + q  -> k = p2 - q
    //
    // y = (p2 - p1)x + p1
    // now intersect this line with the x axis (y = 0)
    // x = p1 / (p1 - p2)

    float x = p1 / (p1 - p2);

// binary search on the function value to find the intersection
// https://en.wikipedia.org/wiki/Bisection_method
#if 1
    // if the approximate intersection is out of bounds, set it to the middle
    if (!(0.0 <= x && x <= 1.0)) {
        x = 0.5;
    }

    vec3 fpos = vec3(pos);
    vec3 faxis = vec3(axis);

    float a_density = p1;
    float a = 0.0;
    float b = 1.0;

    const float tolerance = 0.01;
    for (int i = 0; i < 10; i++) {
        float x_density = density(vec4(fpos + x * faxis, function_data.time));

        if (x_density == 0 || (b - a) < tolerance) {
            break;
        }
        
        if (sign(x_density) == sign(a_density)) {
            a_density = x_density;
            a = x;
        } else {
            b = x;
        }

        x = (a + b) / 2.0;
    }
#endif

    // if the intersection lies outside the range <0, 1.0> we force it to 0.0, which is specially regarded as empty
    if (-0.0001 <= x && x <= 1.0001) {
        vec3 worldspace_intersection = vec3(pos) + vec3(axis) * x;
        vec3 gradient = calculate_gradient(worldspace_intersection);
        vec3 normal = normalize(gradient);

        // the value of 0.0 is reserved for no intersection, so we nudge it to the smallest non-zero value
        float epsilon = 1.0 / 256.0;
        x = max(x, epsilon);

        imageStore(intersections, ivec3(index), vec4(normal, x));
    }
}
