#version 450
#extension GL_EXT_scalar_block_layout : enable

#define USE_SUBGROUP_OPS

#ifdef USE_SUBGROUP_OPS
    #extension GL_KHR_shader_subgroup_basic : enable
    #extension GL_KHR_shader_subgroup_arithmetic : enable
    #extension GL_KHR_shader_subgroup_ballot : enable
#endif


////// input descriptors, keep this synchronized //////

struct Vertex {
    vec3 position; 
    uint packed_normal;
};

layout(binding = 0, r16f) uniform image3D function_values;
layout(binding = 1, rgba8) uniform image3D intersections;
layout(binding = 2, r32ui) uniform uimage3D vertex_indices;
layout(binding = 3, scalar) buffer VertexData {
    uint size;
    uint offset;
	Vertex vertices[];
} vertices;
layout(binding = 4, scalar) buffer IndexData {
    uint size;
    uint offset;
	uint indices[];
} indices;
layout(binding = 5, scalar) uniform FunctionData {
	uvec3 size;
    vec3 offset;
    float scale;
    float time;
} function_data;

/////////////////////////////////

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

const uvec3[] axes = {
    {1,0,0},
    {0,1,0},
    {0,0,1}
};

float density(vec4 d);

// compute the gradient of the function using finite differences
// FIXME code duplication
vec3 calculate_gradient(vec3 pos) {
    const float d = 0.05;
    
    float x = pos.x;
    float y = pos.y;
    float z = pos.z;
    float t = function_data.time;

#if 0
    float origin = density(vec4(pos, function_data.time));

    float dx = (density(vec4(x + d, y, z, t)) - origin) / d;
    float dy = (density(vec4(x, y + d, z, t)) - origin) / d;
    float dz = (density(vec4(x, y, z + d, t)) - origin) / d;
#else
    float dx = (density(vec4(x + d, y, z, t)) - density(vec4(x - d, y, z, t))) / (2.0 * d);
    float dy = (density(vec4(x, y + d, z, t)) - density(vec4(x, y - d, z, t))) / (2.0 * d);
    float dz = (density(vec4(x, y, z + d, t)) - density(vec4(x, y, z - d, t))) / (2.0 * d);
#endif

    return vec3(dx, dy, dz);
}

float plane_distance(vec3 normal, vec3 intersection, vec3 point) {
    // ax + by + cz - q = 0
    float q = dot(normal, intersection);
    // normal is expected to be notmalized
    return dot(normal, point) - q;
}

vec4 get_edge(uvec3 pos, uint axis) {
    uvec3 index = uvec3(pos.x * 3 + axis, pos.yz);
    // uvec3 index = uvec3(pos.x + axis * 64, pos.yz);
    return imageLoad(intersections, ivec3(index));
}

// stolen from https://www.gamedev.net/forums/topic/685081-normal-vector-artifacts-with-nvmeshmender/
uint pack_A2B10G10R10_SNORM_PACK32(vec4 vector) {
    vec4 c = clamp(vector, -1.0, 1.0);

    const uint xs = c.x < 0 ? 1 : 0;
    const uint ys = c.y < 0 ? 1 : 0;
    const uint zs = c.z < 0 ? 1 : 0;
    const uint ws = c.w < 0 ? 1 : 0;

    return uint
    (
        ws << 31 | (uint(c.w       + (ws << 1)) &   1) << 30 |
        zs << 29 | (uint(c.z * 511 + (zs << 9)) & 511) << 20 |
        ys << 19 | (uint(c.y * 511 + (ys << 9)) & 511) << 10 |
        xs <<  9 | (uint(c.x * 511 + (xs << 9)) & 511)
    );
}

const uint INDEX_INVALID = 4294967295;

void main() {
    uvec3 global_id = gl_GlobalInvocationID.xyz;

    //       ______2______           H___________G
    //      /|           /|         /|           /
    //     5 |11        6 |        / |          /|
    //    /  |         /  |10     /  |         / |
    //   |------3-----|   |      E------------F  |
    //   |   |_____1__|___|      |   D________|__C
    //   |   /        |   /      |   /        |  /
    //  8|  4        9|  7       |  /         | /      z  y
    //   | /          | /        | /          |/       | /
    //   |/___________|/         A/___________B        |/___ x
    //          0

    // first clear the index in case we don't compute any vertex
    imageStore(vertex_indices, ivec3(global_id.xyz), uvec4(INDEX_INVALID));

    if (global_id.x >= 63 || global_id.y >= 63 || global_id.z >= 63) {
        return;
    }

    uvec3 A = global_id;
    uvec3 B = A + uvec3(1, 0, 0);
    uvec3 C = A + uvec3(1, 1, 0);
    uvec3 D = A + uvec3(0, 1, 0);
    uvec3 E = A + uvec3(0, 0, 1);
    uvec3 F = A + uvec3(1, 0, 1);
    uvec3 G = A + uvec3(1, 1, 1);
    uvec3 H = A + uvec3(0, 1, 1);

    vec4 edges[12] = {
        get_edge(A, 0),
        get_edge(D, 0),
        get_edge(H, 0),
        get_edge(E, 0),

        get_edge(A, 1),
        get_edge(E, 1),
        get_edge(F, 1),
        get_edge(B, 1),

        get_edge(A, 2),
        get_edge(B, 2),
        get_edge(C, 2),
        get_edge(D, 2),
    };

    uvec3 A_l = uvec3(0, 0, 0);
    uvec3 B_l = uvec3(1, 0, 0);
    uvec3 C_l = uvec3(1, 1, 0);
    uvec3 D_l = uvec3(0, 1, 0);
    uvec3 E_l = uvec3(0, 0, 1);
    uvec3 F_l = uvec3(1, 0, 1);
    uvec3 G_l = uvec3(1, 1, 1);
    uvec3 H_l = uvec3(0, 1, 1);

    uvec3 edge_vertices[12] = {
        A_l,
        D_l,
        H_l,
        E_l,
        A_l,
        E_l,
        F_l,
        B_l,
        A_l,
        B_l,
        C_l,
        D_l
    };

    // stores the q parameter of a plane equation:
    // ax + by + cz + q = 0
    float intersection_planes_q[12];

    vec3 intersections_sum = vec3(0.0);
    uint intersections_count = 0;
    for (int i = 0; i < 12; i++) {
        vec4 intersection = edges[i];
        // zero is a special value
        if (intersection.w > 0.0) {
            vec3 cellspace_point = vec3(edge_vertices[i]) + intersection.w * vec3(axes[i / 4]);

            // ax + by + cz + q = 0
            float q = -dot(intersection.xyz, cellspace_point);

            intersections_sum += cellspace_point;
            intersections_count += 1;

            intersection_planes_q[i] = q;
        }
    }

    // this cell has no intersections, we can exit
    if (intersections_count == 0) {
        return;
    }

    // the vertex is first approximated by the average of intersections
    vec3 cellspace_vertex = intersections_sum / float(intersections_count);

    // iteratively move the point according to the distance to the intersection planes
    for (int iter = 0; iter < 5; iter++) {
        vec3 force = vec3(0.0);
        for (int i = 0; i < 12; i++) {
            vec4 intersection = edges[i];
            if (intersection.w != 0.0) {
                vec3 normal = intersection.xyz;
                float q = intersection_planes_q[i];

                float plane_distance = dot(normal, cellspace_vertex) + q;
                force += plane_distance * normal;
            }

        }
        cellspace_vertex -= 
            // move closer to the planes of the intersections
            0.5 * (force / float(intersections_count)) + 
            // nudge a tiny amount towards the cell center, allegedly it improves the quality
            0.001 * (cellspace_vertex - vec3(0.5));
    }

    // we are bump allocating vertices, a stream compaction pass would probably be more efficient
    // but it seems to be very complicated and no very worth it at this stage
    // instead we use subgroup operation to do a prefix some over invocations which have a vertex to
    // write and then bump allocate this whole block, then each invocation writes its vertex to the predetermined index


#ifdef USE_SUBGROUP_OPS
    // prefix sum to find out the subgroup local index of the output vertex
    uint inclusive_vertex_batch_offset = subgroupInclusiveAdd(1);
    // is there a better way to do this?
    uint total = subgroupMax(inclusive_vertex_batch_offset);

    // the first invocation does the bump allocation
    uint batch_offset;
    if (subgroupElect()) {
        batch_offset = atomicAdd(vertices.offset, total);
    }

    // let the first invocation broadcast the batch offset to the other invocations
    uint broadcast_batch_offset = subgroupBroadcastFirst(batch_offset);

    // -1 since the prefix sum is inclusive of the calling invocation
    uint index = broadcast_batch_offset + inclusive_vertex_batch_offset - 1;
#else
    uint index = atomicAdd(vertices.offset, 1);
#endif

    // if we've reached the capacity of the vertex buffer, just throw away the vertex
    if (index < vertices.size) {
        vec3 position = vec3(A) + cellspace_vertex;
        vec3 normal = normalize(calculate_gradient(position));
        uint packed_normal = pack_A2B10G10R10_SNORM_PACK32(vec4(normal, 0.0));

        Vertex vertex = {
            position,
            packed_normal,
        };

        vertices.vertices[index] = vertex;
        imageStore(vertex_indices, ivec3(global_id.xyz), uvec4(index));
    }
}
