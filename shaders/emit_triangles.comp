#version 450
#extension GL_EXT_scalar_block_layout : enable

// #define USE_SUBGROUP_OPS

#ifdef USE_SUBGROUP_OPS
    #extension GL_KHR_shader_subgroup_basic : enable
    #extension GL_KHR_shader_subgroup_arithmetic : enable
    #extension GL_KHR_shader_subgroup_ballot : enable
#endif

////// input descriptors, keep this synchronized //////

struct Vertex {
    vec3 position; 
    uint packed_normal;
};

layout(binding = 0, r16) uniform image3D function_values;
layout(binding = 1, rgba8) uniform image3D intersections;
layout(binding = 2, r32ui) uniform uimage3D vertex_indices;
layout(binding = 3, scalar) buffer VertexData {
    uint size;
    uint offset;
	Vertex vertices[];
} vertices;
layout(binding = 4, scalar) buffer IndexData {
    uint size;
    uint offset;
	uint indices[];
} indices;
layout(binding = 5, scalar) uniform FunctionData {
	uvec3 size;
    vec3 offset;
    float scale;
    float time;
} function_data;

/////////////////////////////////


layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

const uvec3[] axes = {
    {1,0,0},
    {0,1,0},
    {0,0,1}
};

const uint INDEX_INVALID = 4294967295;

bool vertex_is_positive(uvec3 pos) {
    return imageLoad(function_values, ivec3(pos)).x >= 0.0;
}

uint get_cell_vertex_index(uvec3 pos) {
    return imageLoad(vertex_indices, ivec3(pos)).x;
}

vec4 get_edge(uvec3 pos, uint axis) {
    uvec3 index = uvec3(pos.x * 3 + axis, pos.yz);
    // uvec3 index = uvec3(pos.x + axis * 64, pos.yz);
    return imageLoad(intersections, ivec3(index));
}

void main() {
    uvec3 global_id = gl_GlobalInvocationID.xyz;

    //       ______2______           H___________G
    //      /|           /|         /|           /
    //     5 |11        6 |        / |          /|
    //    /  |         /  |10     /  |         / |
    //   |------3-----|   |      E------------F  |
    //   |   |_____1__|___|      |   D________|__C
    //   |   /        |   /      |   /        |  /
    //  8|  4        9|  7       |  /         | /      z  y
    //   | /          | /        | /          |/       | /
    //   |/___________|/         A/___________B        |/___ x
    //          0

    if (global_id.x >= 62 || global_id.y >= 62 || global_id.z >= 62) {
        return;
    }

    uint v0 = get_cell_vertex_index(global_id);

    if (v0 == INDEX_INVALID) {
        return;
    }

    uvec3 A = global_id;
    uvec3 C = A + uvec3(1, 1, 0);
    uvec3 F = A + uvec3(1, 0, 1);
    uvec3 H = A + uvec3(0, 1, 1);

    vec4 edges[3] = {
        get_edge(H, 0),
        get_edge(F, 1),
        get_edge(C, 2),
    };
    
    int triangle_indices_offset = 0;
    uint triangle_indices[3 * 6];

    for (int axis = 0; axis < 3; axis++) {
        vec4 edge = edges[axis];

        // no intersection
        if (edge.w == 0.0) {
            continue;
        }
        
        uint v1, v2, v3;
        
        if (axis == 0) {
            v1 = get_cell_vertex_index(A + uvec3(0,0,1));
            v2 = get_cell_vertex_index(A + uvec3(0,1,0));
            v3 = get_cell_vertex_index(A + uvec3(0,1,1));
        } else if (axis == 1) {
            v1 = get_cell_vertex_index(A + uvec3(0,0,1));
            v2 = get_cell_vertex_index(A + uvec3(1,0,0));
            v3 = get_cell_vertex_index(A + uvec3(1,0,1));
        } else {
            v1 = get_cell_vertex_index(A + uvec3(0,1,0));
            v2 = get_cell_vertex_index(A + uvec3(1,0,0));
            v3 = get_cell_vertex_index(A + uvec3(1,1,0));
        }
        
        // if (v1 == INDEX_INVALID || v2 == INDEX_INVALID || v3 == INDEX_INVALID)
        // {
        //     // Shouldn't ever happen
        //     // kinda can't do error reporting from the shader
        //     // also this may happen when we've run out ofspace in the vertex buffer in the previous pass
        //     continue;
        // }

        int o = triangle_indices_offset;
        triangle_indices[o + 0] = v0;
        triangle_indices[o + 1] = v1;
        triangle_indices[o + 2] = v3;
        triangle_indices[o + 3] = v0;
        triangle_indices[o + 4] = v3;
        triangle_indices[o + 5] = v2;

        triangle_indices_offset += 6;
    }

    // do the subgroup bump allocation dance again
#ifdef USE_SUBGROUP_OPS
    // prefix sum to find out the subgroup local index of the output vertex
    uint inclusive_vertex_batch_offset = subgroupInclusiveAdd(triangle_indices_offset);
    // is there a better way to do this?
    uint total = subgroupMax(inclusive_vertex_batch_offset);

    // the first invocation does the bump allocation
    uint batch_offset;
    if (subgroupElect()) {
        batch_offset = atomicAdd(indices.offset, total);
    }

    // let the first invocation broadcast the batch offset to the other invocations
    uint broadcast_batch_offset = subgroupBroadcastFirst(batch_offset);

    uint index = broadcast_batch_offset + inclusive_vertex_batch_offset - triangle_indices_offset;
#else
    uint index = atomicAdd(indices.offset, triangle_indices_offset);
#endif

    // if we've reached the capacity of the vertex buffer, just throw away the triangles
    if (index < indices.size) {
        // copy thr indices to the storage buffer
        for (int i = 0; i < triangle_indices_offset; i++) {
            indices.indices[index + i] = triangle_indices[i];
        }
    }

}
